import Foundation
import SwiftUI
import Combine

class TransactionViewModel: ObservableObject {
    @Published var transaction: DetailedTransaction?
    @Published var isLoading = false
    @Published var errorMessage: String?
    @Published var showToast: Bool = false
    @Published var toastMessage: String = ""
    
    private var cancellables = Set<AnyCancellable>()
    private var currentSignature: String?
    private var currentSOLPrice: Double = 158.07 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –ø–æ–¥–ø–∏—Å–∏
    func loadTransaction(signature: String) {
        currentSignature = signature
        isLoading = true
        errorMessage = nil
        transaction = nil
        
        print("üîç Loading transaction: \(signature)")
        
        // –ï—Å–ª–∏ signature –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º mock –¥–ª—è preview
        guard !signature.isEmpty else {
            print("‚ö†Ô∏è Empty signature, loading mock for preview")
            loadMockTransaction()
            return
        }
        
        Task {
            do {
                let entity = try await SolSpyAPI.shared.search(address: signature)
                if case .transaction(let tx) = entity {
                    await MainActor.run {
                        self.transaction = tx.transaction
                        self.isLoading = false
                        print("‚úÖ Loaded real transaction from API")
                    }
                } else {
                    await MainActor.run {
                        print("‚ö†Ô∏è API returned different type (not a transaction)")
                        self.errorMessage = "–£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π"
                        self.isLoading = false
                    }
                }
            } catch {
                await MainActor.run {
                    print("‚ùå API error: \(error)")
                    
                    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
                    if error.localizedDescription.contains("400") {
                        // –î–ª—è —Å–≤–µ–∂–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∫–æ—Ç–æ—Ä—ã–µ "just now") –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        self.createBasicTransactionInfo(signature: signature)
                        self.errorMessage = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—á–µ–Ω—å —Å–≤–µ–∂–∞—è –∏ –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∫–∞–∑–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."
                    } else if error.localizedDescription.contains("404") {
                        self.errorMessage = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                    } else if error.localizedDescription.contains("timeout") || error.localizedDescription.contains("connection") {
                        self.errorMessage = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç."
                    } else {
                        self.errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: \(error.localizedDescription)"
                    }
                    
                    self.isLoading = false
                }
            }
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞
    func loadMockTransaction() {
        guard let url = Bundle.main.url(forResource: "Transaction", withExtension: "json") else {
            self.errorMessage = "Could not find test JSON file"
            self.isLoading = false
            return
        }
        
        do {
            let data = try Data(contentsOf: url)
            let decoder = JSONDecoder()
            let response = try decoder.decode(TransactionResponse.self, from: data)
            
            DispatchQueue.main.async {
                self.transaction = response.transaction
                self.isLoading = false
            }
        } catch {
            DispatchQueue.main.async {
                self.errorMessage = "Decoding error: \(error.localizedDescription)"
                self.isLoading = false
            }
        }
    }
    
    // –†–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å API (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º)
    private func fetchTransactionFromAPI(signature: String) {
        // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –∑–∞–ø—Ä–æ—Å–∞
        guard let url = URL(string: "https://api.example.com/transactions/\(signature)") else {
            self.errorMessage = "Invalid URL"
            self.isLoading = false
            return
        }
        
        URLSession.shared.dataTaskPublisher(for: url)
            .map(\.data)
            .decode(type: TransactionResponse.self, decoder: JSONDecoder())
            .receive(on: DispatchQueue.main)
            .sink { completion in
                self.isLoading = false
                
                if case .failure(let error) = completion {
                    self.errorMessage = "Error: \(error.localizedDescription)"
                }
            } receiveValue: { response in
                self.transaction = response.transaction
            }
            .store(in: &cancellables)
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    func formattedSignature(_ signature: String) -> String {
        return formatWalletAddress(signature)
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    var transactionResult: String {
        if transaction?.transactionError == nil {
            return "SUCCESS"
        } else {
            return "FAILED"
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    var resultColor: Color {
        if transaction?.transactionError == nil {
            return Color(red: 0.247, green: 0.918, blue: 0.286)
        } else {
            return Color.red
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
    var confirmationStatus: String {
        return "Finalized (MAX Confirmations)"
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ SOL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    func formatSolAmount(_ amount: Int) -> String {
        let solAmount = Double(amount) / 1_000_000_000.0
        return String(format: "%.5f", solAmount)
    }
    
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SOL –≤ USD
    func solToUSD(_ solAmount: Double) -> String {
        let usdAmount = solAmount * currentSOLPrice
        return String(format: "$%.2f", usdAmount)
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å SOL
    func updateSOLPrice(_ price: Double) {
        currentSOLPrice = price
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ
    func shortAddress(_ address: String) -> String {
        return formatWalletAddress(address)
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    func refreshData() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
        guard let signature = currentSignature else { return }
        
        Task {
            do {
                let entity = try await SolSpyAPI.shared.search(address: signature)
                if case .transaction(let tx) = entity {
                    await MainActor.run {
                        self.transaction = tx.transaction
                        self.errorMessage = nil
                    }
                }
            } catch {
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ—Å—Ç –≤–º–µ—Å—Ç–æ –∑–∞–º–µ–Ω—ã –¥–∞–Ω–Ω—ã—Ö
                await MainActor.run {
                    self.showToast(message: "Failed to refresh: \(error.localizedDescription)")
                }
            }
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    func showToast(message: String) {
        toastMessage = message
        showToast = true
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) { [weak self] in
            self?.showToast = false
        }
    }
    
    // –ö–æ–ø–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    func copySignerAddress(_ address: String) {
        UIPasteboard.general.string = address
        showToast(message: "Signer address copied")
    }
    
    // –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å–≤–µ–∂–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    private func createBasicTransactionInfo(signature: String) {
        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        let basicTransaction = DetailedTransaction(
            description: "Fresh Transaction",
            type: "TRANSFER",
            source: "Solana WebSocket",
            fee: 5000, // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –≤ –ª–∞–º–ø–æ—Ä—Ç–∞—Ö
            feePayer: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–≥–¥–∞ API –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
            signature: signature,
            slot: Int.random(in: 345870000...345900000),
            timestamp: Int(Date().timeIntervalSince1970),
            tokenTransfers: [],
            nativeTransfers: [],
            accountData: [],
            transactionError: nil,
            instructions: [],
            events: [:]
        )
        
        self.transaction = basicTransaction
        self.isLoading = false
    }
} 