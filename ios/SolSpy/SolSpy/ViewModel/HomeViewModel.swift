import Foundation
import Combine

@MainActor
class HomeViewModel: ObservableObject {
    @Published var solPrice: SOLPriceDisplay?
    @Published var latestTransactions: [LatestTransaction] = []
    @Published var topTokens: [TopToken] = []
    @Published var mevStats: SandwichStats?
    @Published var lastMEVAttackTime: Date?
    @Published var isPriceLoading: Bool = false
    @Published var isTransactionsLoading: Bool = false
    @Published var isTopTokensLoading: Bool = false
    @Published var isMEVLoading: Bool = false
    @Published var webSocketState: WebSocketState = .disconnected
    
    private var priceTimer: Timer?
    private var tokensTimer: Timer?
    private var mevTimer: Timer?
    private var webSocketManager = SolanaWebSocketManager.shared
    private var mevAPIService = MEVAPIService.shared
    private var cancellables = Set<AnyCancellable>()
    
    init() {
        loadInitialData()
        startTimers()
        setupWebSocketSubscriptions()
    }
    
    deinit {
        priceTimer?.invalidate()
        priceTimer = nil
        
        tokensTimer?.invalidate()
        tokensTimer = nil
        
        mevTimer?.invalidate()
        mevTimer = nil
        
        // –í—ã–∑—ã–≤–∞–µ–º disconnect –≤ Task –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å @MainActor
        Task { @MainActor in
            webSocketManager.disconnect()
        }
        
        cancellables.removeAll()
    }
    
    // MARK: - Initial Data Loading
    private func loadInitialData() {
        Task {
            await fetchSOLPrice()
            await fetchTopTokens()
            await fetchMEVStats()
            startWebSocketConnection()
        }
    }
    
    // MARK: - SOL Price Methods
    func fetchSOLPrice() async {
        guard !isPriceLoading else { return }
        
        isPriceLoading = true
        
        do {
            let price = try await BinanceAPI.shared.fetchSOLPrice()
            solPrice = price
        } catch {
            print("‚ùå Error fetching SOL price: \(error)")
        }
        
        isPriceLoading = false
    }
    
    // MARK: - WebSocket Methods
    private func setupWebSocketSubscriptions() {
        webSocketManager.$connectionState
            .receive(on: DispatchQueue.main)
            .sink { [weak self] state in
                self?.webSocketState = state
            }
            .store(in: &cancellables)
        
        webSocketManager.$latestTransactions
            .receive(on: DispatchQueue.main)
            .sink { [weak self] transactions in
                self?.latestTransactions = transactions
            }
            .store(in: &cancellables)
    }
    
    private func startWebSocketConnection() {
        Task { @MainActor in
            webSocketManager.connect()
        }
    }
    
    var webSocketStatusText: String {
        switch webSocketState {
        case .connected:
            return "Connected"
        case .connecting:
            return "Connecting..."
        case .disconnected:
            return "Disconnected"
        case .error:
            return "Connection Error"
        }
    }
    
    var isWebSocketConnected: Bool {
        webSocketState == .connected
    }
    
    func refreshAll() async {
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        async let priceTask: Void = fetchSOLPrice()
        async let tokensTask: Void = fetchTopTokens()
        async let mevTask: Void = fetchMEVStats()
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        _ = await (priceTask, tokensTask, mevTask)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        refreshTransactions()
    }
    
    private func refreshTransactions() {
        // –î–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        Task { @MainActor in
            webSocketManager.disconnect()
            
            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                Task { @MainActor in
                    self.webSocketManager.connect()
                }
            }
        }
    }
    
    // MARK: - MEV Methods
    func fetchMEVStats() async {
        guard !isMEVLoading else { return }
        
        isMEVLoading = true
        
        do {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º 7 –¥–Ω–µ–π –¥–ª—è –±–æ–ª–µ–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            let response = try await mevAPIService.fetchSandwiches(days: .sevenDays)
            mevStats = response.stats
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if let latestAttack = response.sandwiches.first {
                print("üìä Latest MEV attack: \(latestAttack.createdAt)")
                let formatter = ISO8601DateFormatter()
                formatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
                if let attackDate = formatter.date(from: latestAttack.createdAt) {
                    lastMEVAttackTime = attackDate
                    let hoursAgo = Date().timeIntervalSince(attackDate) / 3600
                    print("‚è∞ Latest attack was \(String(format: "%.1f", hoursAgo)) hours ago")
                    
                    if hoursAgo > 2 {
                        print("‚ö†Ô∏è MEV data seems stale (>2 hours old)")
                    }
                }
            }
            
        } catch {
            print("‚ùå Error fetching MEV stats: \(error)")
        }
        
        isMEVLoading = false
    }
    
    // MARK: - Timer Management
    private func startTimers() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã SOL –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (Binance API –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π)
        priceTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { _ in
            Task { @MainActor in
                await self.fetchSOLPrice()
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        tokensTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { _ in
            Task { @MainActor in
                await self.fetchTopTokens()
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ MEV —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã (–¥–∞–Ω–Ω—ã–µ –Ω–µ —Ç–∞–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è —Ä–µ–∞–ª—Ç–∞–π–º–∞)
        mevTimer = Timer.scheduledTimer(withTimeInterval: 120.0, repeats: true) { _ in
            Task { @MainActor in
                await self.fetchMEVStats()
            }
        }
        
        // WebSocket –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—Ç–∞–π–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    }
    
    func stopTimers() {
        priceTimer?.invalidate()
        priceTimer = nil
        
        tokensTimer?.invalidate()
        tokensTimer = nil
        
        mevTimer?.invalidate()
        mevTimer = nil
        
        // –û—Ç–∫–ª—é—á–∞–µ–º WebSocket
        Task { @MainActor in
            webSocketManager.disconnect()
        }
    }
    
    // MARK: - Top Tokens Methods
    func fetchTopTokens() async {
        guard !isTopTokensLoading else { return }
        
        isTopTokensLoading = true
        
        do {
            let tokens = try await SolSpyAPI.shared.fetchTopTokens()
            topTokens = tokens
        } catch {
            print("‚ùå Error fetching top tokens: \(error)")
            topTokens = TopToken.mockTokens
        }
        
        isTopTokensLoading = false
    }
    
    // MARK: - Testing Methods
    func createTestTransaction() async {
        await webSocketManager.createTestTransaction()
    }
    
    // Computed property –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö MEV –¥–∞–Ω–Ω—ã—Ö
    var isMEVDataStale: Bool {
        guard let lastAttack = lastMEVAttackTime else { return true }
        let hoursAgo = Date().timeIntervalSince(lastAttack) / 3600
        return hoursAgo > 2.0 // –°—á–∏—Ç–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –µ—Å–ª–∏ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤
    }
} 