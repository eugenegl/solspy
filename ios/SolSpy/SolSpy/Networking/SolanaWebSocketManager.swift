import Foundation
import Network
import Combine

// MARK: - WebSocket Connection States
enum WebSocketState: Equatable {
    case disconnected
    case connecting
    case connected
    case error(Error)
    
    static func == (lhs: WebSocketState, rhs: WebSocketState) -> Bool {
        switch (lhs, rhs) {
        case (.disconnected, .disconnected),
             (.connecting, .connecting),
             (.connected, .connected):
            return true
        case (.error(let lhsError), .error(let rhsError)):
            return lhsError.localizedDescription == rhsError.localizedDescription
        default:
            return false
        }
    }
    

}

// MARK: - WebSocket Events
enum SolanaWebSocketEvent {
    case newTransaction(LatestTransaction)
    case blockUpdate(Int)
    case connectionStateChanged(WebSocketState)
}

// MARK: - Solana WebSocket Manager
@MainActor
class SolanaWebSocketManager: ObservableObject {
    static let shared = SolanaWebSocketManager()
    
    @Published var connectionState: WebSocketState = .disconnected
    @Published var latestTransactions: [LatestTransaction] = []
    
    private var webSocketTask: URLSessionWebSocketTask?
    private var urlSession: URLSession
    private let eventSubject = PassthroughSubject<SolanaWebSocketEvent, Never>()
    
    // Throttling –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    private var lastTransactionTime: Date = Date.distantPast
    private let transactionInterval: TimeInterval = 5.0 // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    
    // Public publisher –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    var eventPublisher: AnyPublisher<SolanaWebSocketEvent, Never> {
        eventSubject.eraseToAnyPublisher()
    }
    
    private var isConnected: Bool {
        webSocketTask?.state == .running
    }
    
    private init() {
        let config = URLSessionConfiguration.default
        config.timeoutIntervalForResource = 30
        self.urlSession = URLSession(configuration: config)
    }
    
    // MARK: - Public Interface
    
    /// –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Solana WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    func connect() {
        guard !isConnected else {
            print("üîå WebSocket already connected")
            return
        }
        
        disconnect() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π Solana RPC WebSocket
        guard let url = URL(string: "wss://api.mainnet-beta.solana.com") else {
            updateConnectionState(.error(WebSocketError.invalidURL))
            return
        }
        
        print("üîå Connecting to Solana WebSocket: \(url)")
        updateConnectionState(.connecting)
        
        webSocketTask = urlSession.webSocketTask(with: url)
        webSocketTask?.resume()
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        startListening()
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        subscribeToRecentTransactions()
        
        updateConnectionState(.connected)
    }
    
    /// –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç WebSocket
    func disconnect() {
        print("üîå Disconnecting WebSocket")
        webSocketTask?.cancel(with: .goingAway, reason: nil)
        webSocketTask = nil
        updateConnectionState(.disconnected)
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ UI (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    func createTestTransaction() async {
        print("üß™ Creating manual test transaction...")
        let testTransaction = createTransactionFromLogs(["Manual test transaction"], signature: nil)
        await addNewTransaction(testTransaction)
    }
    
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    func setTransactionInterval(_ interval: TimeInterval) {
        print("‚öôÔ∏è Setting transaction interval to \(interval) seconds")
        // –ú—ã –Ω–µ –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å let –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É, –Ω–æ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤ –±—É–¥—É—â–µ–º
    }
    
    // MARK: - Private Methods
    
    private func updateConnectionState(_ state: WebSocketState) {
        connectionState = state
        eventSubject.send(.connectionStateChanged(state))
    }
    
    private func startListening() {
        guard let webSocketTask = webSocketTask else { return }
        
        webSocketTask.receive { [weak self] result in
            guard let self = self else { return }
            
            switch result {
            case .success(let message):
                Task { @MainActor in
                    await self.handleWebSocketMessage(message)
                    self.startListening() // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
                }
            case .failure(let error):
                Task { @MainActor in
                    print("‚ùå WebSocket error: \(error)")
                    self.updateConnectionState(.error(error))
                    self.attemptReconnection()
                }
            }
        }
    }
    
    private func handleWebSocketMessage(_ message: URLSessionWebSocketTask.Message) async {
        switch message {
        case .string(let text):
            await parseWebSocketMessage(text)
        case .data(let data):
            if let text = String(data: data, encoding: .utf8) {
                await parseWebSocketMessage(text)
            }
        @unknown default:
            print("‚ö†Ô∏è Unknown WebSocket message type")
        }
    }
    
    private func parseWebSocketMessage(_ text: String) async {
        print("üì• Received WebSocket message: \(String(text.prefix(200)))...")
        
        // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç Solana RPC
        do {
            let data = text.data(using: .utf8) ?? Data()
            let json = try JSONSerialization.jsonObject(with: data) as? [String: Any]
            
            print("üîç Parsing JSON structure...")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            if let params = json?["params"] as? [String: Any],
               let result = params["result"] as? [String: Any] {
                print("‚úÖ Found params.result structure")
                
                if let context = result["context"] as? [String: Any],
                   let value = result["value"] as? [String: Any] {
                    print("‚úÖ Found context and value")
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    if let signature = value["signature"] as? String {
                        print("‚úÖ Found transaction signature: \(signature)")
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –ª–æ–≥–æ–≤
                        var instructionType = "transfer"
                        if let logs = value["logs"] as? [String] {
                            instructionType = determineInstructionType(from: logs)
                        }
                        
                        let newTransaction = LatestTransaction(
                            signature: signature,
                            blockNumber: (context["slot"] as? Int) ?? Int.random(in: 345870650...345870700),
                            timeAgo: "just now",
                            instructionType: instructionType,
                            instructionCount: 1
                        )
                        
                        await addNewTransaction(newTransaction)
                        return
                    }
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
            if let method = json?["method"] as? String {
                if method == "logsNotification",
                   let params = json?["params"] as? [String: Any],
                   let result = params["result"] as? [String: Any],
                   let value = result["value"] as? [String: Any],
                   let signature = value["signature"] as? String {
                    
                    print("‚úÖ Found logsNotification with signature: \(signature)")
                    
                    var instructionType = "transfer"
                    if let logs = value["logs"] as? [String] {
                        instructionType = determineInstructionType(from: logs)
                    }
                    
                    let newTransaction = LatestTransaction(
                        signature: signature,
                        blockNumber: Int.random(in: 345870650...345870700),
                        timeAgo: "just now",
                        instructionType: instructionType,
                        instructionCount: 1
                    )
                    
                    await addNewTransaction(newTransaction)
                    return
                }
            }
            
            // –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ—ë –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print("‚ùå Unrecognized JSON structure:")
            if let jsonData = try? JSONSerialization.data(withJSONObject: json ?? [:], options: .prettyPrinted),
               let jsonString = String(data: jsonData, encoding: .utf8) {
                print(jsonString)
            }
            
        } catch {
            print("‚ùå Failed to parse WebSocket message: \(error)")
        }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ–≤
    private func determineInstructionType(from logs: [String]) -> String {
        for log in logs {
            if log.contains("Transfer") {
                return "transfer"
            } else if log.contains("SetComputeUnitLimit") {
                return "SetComputeUnitLimit"
            } else if log.contains("swap") || log.contains("Swap") {
                return "swap"
            } else if log.contains("burn") || log.contains("Burn") {
                return "burn"
            } else if log.contains("mint") || log.contains("Mint") {
                return "mint"
            }
        }
        return "transfer" // default
    }
    
    private func subscribeToRecentTransactions() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ª–æ–≥–∏ –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        let subscription = """
        {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "logsSubscribe",
            "params": [
                "all",
                {
                    "commitment": "finalized"
                }
            ]
        }
        """
        
        sendWebSocketMessage(subscription)
    }
    
    private func sendWebSocketMessage(_ message: String) {
        guard let webSocketTask = webSocketTask else {
            print("‚ùå Cannot send message: WebSocket not connected")
            return
        }
        
        let message = URLSessionWebSocketTask.Message.string(message)
        webSocketTask.send(message) { error in
            if let error = error {
                print("‚ùå Failed to send WebSocket message: \(error)")
            } else {
                print("üì§ Sent WebSocket subscription")
            }
        }
    }
    

    
    private func createTransactionFromLogs(_ logs: [String], signature: String?) -> LatestTransaction {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ–≤
        let instructionTypes = ["transfer", "SetComputeUnitLimit", "swap", "burn", "mint"]
        let randomInstruction = instructionTypes.randomElement() ?? "transfer"
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ñ–∏–∫—Ç–∏–≤–Ω—É—é
        let finalSignature: String
        if let realSignature = signature {
            finalSignature = realSignature
        } else {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –ø–æ–¥–ø–∏—Å—å (44 —Å–∏–º–≤–æ–ª–∞ base58)
            let chars = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
            finalSignature = String((0..<44).map { _ in chars.randomElement()! })
        }
        
        return LatestTransaction(
            signature: finalSignature,
            blockNumber: Int.random(in: 345870650...345870700),
            timeAgo: "just now",
            instructionType: randomInstruction,
            instructionCount: Int.random(in: 1...5)
        )
    }
    
    private func addNewTransaction(_ transaction: LatestTransaction) async {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º throttling - –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        let now = Date()
        let timeSinceLastTransaction = now.timeIntervalSince(lastTransactionTime)
        
        if timeSinceLastTransaction < transactionInterval {
            print("‚è±Ô∏è Throttling: Skipping transaction (only \(String(format: "%.1f", timeSinceLastTransaction))s since last)")
            return
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        lastTransactionTime = now
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        latestTransactions.insert(transaction, at: 0)
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if latestTransactions.count > 10 {
            latestTransactions = Array(latestTransactions.prefix(10))
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        eventSubject.send(.newTransaction(transaction))
        
        print("üÜï New transaction added: \(transaction.shortSignature) - \(transaction.instructionType)")
    }
    
    private func attemptReconnection() {
        print("üîÑ Attempting WebSocket reconnection in 5 seconds...")
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) { [weak self] in
            guard let self = self else { return }
            
            if case .connected = self.connectionState {
                // –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è
            } else {
                self.connect()
            }
        }
    }
}

// MARK: - WebSocket Errors
enum WebSocketError: Error, LocalizedError {
    case invalidURL
    case connectionFailed
    case subscriptionFailed
    
    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "Invalid WebSocket URL"
        case .connectionFailed:
            return "WebSocket connection failed"
        case .subscriptionFailed:
            return "Failed to subscribe to events"
        }
    }
} 