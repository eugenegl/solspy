import Foundation
import Combine

@MainActor
class HomeViewModel: ObservableObject {
    @Published var solPrice: SOLPriceDisplay?
    @Published var latestTransactions: [LatestTransaction] = []
    @Published var topTokens: [TopToken] = []
    @Published var isPriceLoading: Bool = false
    @Published var isTransactionsLoading: Bool = false
    @Published var isTopTokensLoading: Bool = false
    @Published var webSocketState: WebSocketState = .disconnected
    
    private var priceTimer: Timer?
    private var tokensTimer: Timer?
    private var webSocketManager = SolanaWebSocketManager.shared
    private var cancellables = Set<AnyCancellable>()
    
    init() {
        loadInitialData()
        startTimers()
        setupWebSocketSubscriptions()
    }
    
    deinit {
        priceTimer?.invalidate()
        priceTimer = nil
        
        tokensTimer?.invalidate()
        tokensTimer = nil
        
        // –í—ã–∑—ã–≤–∞–µ–º disconnect –≤ Task –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å @MainActor
        Task { @MainActor in
            webSocketManager.disconnect()
        }
        
        cancellables.removeAll()
    }
    
    // MARK: - Initial Data Loading
    private func loadInitialData() {
        Task {
            await fetchSOLPrice()
            await fetchTopTokens()
            startWebSocketConnection()
        }
    }
    
    // MARK: - SOL Price Methods
    func fetchSOLPrice() async {
        isPriceLoading = true
        print("üîÑ Starting SOL price fetch...")
        
        do {
            let priceData = try await BinanceAPI.shared.fetchSOLPrice()
            solPrice = priceData
            print("‚úÖ SOL price loaded: \(priceData.formattedPrice), change: \(priceData.formattedChange)")
        } catch {
            print("‚ùå Failed to fetch SOL price: \(error)")
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º nil —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å placeholder –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            solPrice = nil
            print("üîÑ Price data cleared due to API error")
        }
        
        isPriceLoading = false
    }
    
    // MARK: - WebSocket Methods
    private func setupWebSocketSubscriptions() {
        print("üîó Setting up WebSocket subscriptions...")
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è WebSocket
        webSocketManager.eventPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] event in
                guard let self = self else { 
                    print("‚ùå Self is nil in WebSocket event handler")
                    return 
                }
                
                print("üì® Received WebSocket event: \(event)")
                
                switch event {
                case .newTransaction(let transaction):
                    print("üÜï New transaction event received: \(transaction.shortSignature)")
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                    let oldCount = self.latestTransactions.count
                    self.latestTransactions = self.webSocketManager.latestTransactions
                    print("üìä Updated transactions: \(oldCount) -> \(self.latestTransactions.count)")
                    
                case .connectionStateChanged(let state):
                    print("üîå WebSocket state changed: \(state)")
                    self.webSocketState = state
                    
                case .blockUpdate(let blockNumber):
                    print("üì¶ New block: \(blockNumber)")
                }
            }
            .store(in: &cancellables)
        
        print("‚úÖ WebSocket subscriptions set up, cancellables count: \(cancellables.count)")
    }
    
    private func startWebSocketConnection() {
        isTransactionsLoading = true
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ
        latestTransactions = MockTransactionsProvider.generateMockTransactions()
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è —Ä–µ–∞–ª—Ç–∞–π–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        webSocketManager.connect()
        
        isTransactionsLoading = false
    }
    
    private func refreshTransactions() {
        // –î–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        Task { @MainActor in
            webSocketManager.disconnect()
            
            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                Task { @MainActor in
                    self.webSocketManager.connect()
                }
            }
        }
    }
    
    // MARK: - Timer Management
    private func startTimers() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã SOL –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (Binance API –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π)
        priceTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { _ in
            Task { @MainActor in
                await self.fetchSOLPrice()
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        tokensTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { _ in
            Task { @MainActor in
                await self.fetchTopTokens()
            }
        }
        
        // WebSocket –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—Ç–∞–π–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    }
    
    func stopTimers() {
        priceTimer?.invalidate()
        priceTimer = nil
        
        tokensTimer?.invalidate()
        tokensTimer = nil
        
        // –û—Ç–∫–ª—é—á–∞–µ–º WebSocket
        Task { @MainActor in
            webSocketManager.disconnect()
        }
    }
    
    // MARK: - Top Tokens Methods
    func fetchTopTokens() async {
        isTopTokensLoading = true
        print("üîÑ Starting top tokens fetch...")
        
        do {
            let tokens = try await SolSpyAPI.shared.fetchTopTokens()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if !tokens.isEmpty {
                topTokens = tokens
                print("‚úÖ Top tokens loaded: \(tokens.count) tokens with real logos")
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                TopToken.mockTokens = tokens
            } else {
                print("‚ö†Ô∏è Received empty tokens list, keeping current data")
            }
        } catch {
            print("‚ùå Failed to fetch top tokens: \(error)")
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ mock
            if topTokens.isEmpty {
                print("üìã Using fallback mock data")
                topTokens = TopToken.mockTokens
            } else {
                print("üìã Keeping last successful data")
            }
        }
        
        isTopTokensLoading = false
    }
    
    // MARK: - Pull to Refresh
    func refreshAll() async {
        await fetchSOLPrice()
        await fetchTopTokens()
        refreshTransactions()
    }
    
    // MARK: - Testing Methods
    func createTestTransaction() async {
        await webSocketManager.createTestTransaction()
    }
    
    // MARK: - WebSocket Status
    var isWebSocketConnected: Bool {
        switch webSocketState {
        case .connected:
            return true
        default:
            return false
        }
    }
    
    var webSocketStatusText: String {
        switch webSocketState {
        case .disconnected:
            return "Disconnected"
        case .connecting:
            return "Connecting..."
        case .connected:
            return "Live"
        case .error(let error):
            return "Error: \(error.localizedDescription)"
        }
    }
} 